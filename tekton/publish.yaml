apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-tekton-triggers
spec:
  resources:
    inputs:
    - name: source
      type: git
      targetPath: go/src/github.com/tektoncd/triggers
    - name: bucket
      type: storage
    outputs:
    - name: bucket
      type: storage
    - name: builtControllerImage
      type: image
    - name: builtWebhookImage
      type: image
    - name: builtEventListenerSinkImage
      type: image
    - name: builtCoreInterceptorsImage
      type: image
    - name: notification
      type: cloudEvent
  params:
  - name: versionTag
    description: The vX.Y.Z version that the artifacts should be tagged with (including `v`)
  - name: imageRegistry
    description: TODO(tektoncd/pipeline#569) This is a hack to make it easy for folks to switch the registry being used by the many many image outputs
  - name: pathToProject
    description: The path to the folder in the go/src dir that contains the project, which is used by `ko` to name the resulting images
  - name: releaseAsLatest
    description: "Whether to tag and publish this release as Triggers' latest"
    default: "true"
  steps:
  - name: link-input-bucket-to-output
    image: busybox
    command: ["cp"]
    args:
    - -r
    - "/workspace/bucket"
    - "/workspace/output/"

  - name: ensure-release-dirs-exist
    image: busybox
    command: ["mkdir"]
    args:
    - "-p"
    - "/workspace/output/bucket/latest/"
    - "/workspace/output/bucket/previous/$(params.versionTag)/"

  - name: run-ko
    image: gcr.io/tekton-releases/dogfooding/ko-gcloud:latest
    env:
    - name: KO_DOCKER_REPO
      value: $(params.imageRegistry)
    - name: GOPATH
      value: /workspace/go
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/release.json
    script: |
      #!/bin/sh
      set -ex
      # Activate service account
      gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
      # Setup docker-auth
      gcloud auth configure-docker

      # ko requires this variable to be set in order to set image creation timestamps correctly https://github.com/google/go-containerregistry/pull/146
      export SOURCE_DATE_EPOCH=`date +%s`

      # Change to directory with our .ko.yaml
      cd /workspace/go/src/github.com/tektoncd/triggers
      # Rewrite "devel" to inputs.params.versionTag
      sed -i -e 's/\(triggers.tekton.dev\/release\): "devel"/\1: "$(params.versionTag)"/g' -e 's/\(version\): "devel"/\1: "$(params.versionTag)"/g' /workspace/go/src/github.com/tektoncd/triggers/config/*.yaml
      sed -i -e 's/\(triggers.tekton.dev\/release\): "devel"/\1: "$(params.versionTag)"/g' -e 's/\(version\): "devel"/\1: "$(params.versionTag)"/g' /workspace/go/src/github.com/tektoncd/triggers/config/interceptors/*.yaml

      OUTPUT_BUCKET_RELEASE_DIR="/workspace/output/bucket/previous/$(params.versionTag)"

      # Publish images and create release.yaml
      ko resolve --platform=all --preserve-import-paths -t $(params.versionTag) -f /workspace/go/src/github.com/tektoncd/triggers/config/ > $OUTPUT_BUCKET_RELEASE_DIR/release.yaml
      ko resolve --platform=all --preserve-import-paths -t $(params.versionTag) -f /workspace/go/src/github.com/tektoncd/triggers/config/interceptors > $OUTPUT_BUCKET_RELEASE_DIR/interceptors.yaml

      # Publish images and create release.notags.yaml
      # This is useful if your container runtime doesn't support the `image-reference:tag@digest` notation
      # This is currently the case for `cri-o` (and most likely others)
      ko resolve --platform=all --preserve-import-paths -f /workspace/go/src/github.com/tektoncd/triggers/config/ > $OUTPUT_BUCKET_RELEASE_DIR/release.notags.yaml
      ko resolve --platform=all --preserve-import-paths -f /workspace/go/src/github.com/tektoncd/triggers/config/interceptors > $OUTPUT_BUCKET_RELEASE_DIR/interceptors.notags.yaml
    volumeMounts:
      - name: gcp-secret
        mountPath: /secret

  - name: copy-to-latest-bucket
    image: busybox
    workingDir: "/workspace/output/bucket"
    script: |
      #!/bin/sh
      set -ex

      if [[ "$(params.releaseAsLatest)" == "true" ]]
      then
        mkdir -p "/workspace/output/bucket/latest/"
        OUTPUT_BUCKET_RELEASE_DIR="/workspace/output/bucket/previous/$(params.versionTag)"
        OUTPUT_BUCKET_LATEST_DIR="/workspace/output/bucket/latest"
        cp "$OUTPUT_BUCKET_RELEASE_DIR/release.yaml" "$OUTPUT_BUCKET_LATEST_DIR/release.yaml"
        cp "$OUTPUT_BUCKET_RELEASE_DIR/release.notags.yaml" "$OUTPUT_BUCKET_LATEST_DIR/release.notags.yaml"
        cp "$OUTPUT_BUCKET_RELEASE_DIR/interceptors.yaml" "$OUTPUT_BUCKET_LATEST_DIR/interceptors.yaml"
        cp "$OUTPUT_BUCKET_RELEASE_DIR/interceptors.notags.yaml" "$OUTPUT_BUCKET_LATEST_DIR/interceptors.notags.yaml"
      fi

  - name: tag-images
    image: google/cloud-sdk
    script: |
      #!/usr/bin/env bash
      set -ex

      REGIONS=(us eu asia)
      IMAGES=(
      $(params.imageRegistry)/$(params.pathToProject)/$(resources.outputs.builtControllerImage.url):$(params.versionTag)
      $(params.imageRegistry)/$(params.pathToProject)/$(resources.outputs.builtWebhookImage.url):$(params.versionTag)
      $(params.imageRegistry)/$(params.pathToProject)/$(resources.outputs.builtEventListenerSinkImage.url):$(params.versionTag)
      )
      INTERCEPTOR_IMAGES=(
      $(params.imageRegistry)/$(params.pathToProject)/$(resources.outputs.builtCoreInterceptorsImage.url):$(params.versionTag)
      )

      # Parse the built images from the release.yaml generated by ko
      BUILT_IMAGES=( $(/workspace/go/src/github.com/tektoncd/triggers/tekton/koparse/koparse.py --path /workspace/output/bucket/previous/$(params.versionTag)/release.yaml --base $(params.imageRegistry)/$(params.pathToProject) --images ${IMAGES[@]}) )
      BUILT_IMAGES+=( $(/workspace/go/src/github.com/tektoncd/triggers/tekton/koparse/koparse.py --path /workspace/output/bucket/previous/$(params.versionTag)/interceptors.yaml --base $(params.imageRegistry)/$(params.pathToProject) --images ${INTERCEPTOR_IMAGES[@]}) )

      # Auth with account credentials
      gcloud auth activate-service-account --key-file=/secret/release.json

      # Tag the images and put them in all the regions
      for IMAGE in "${BUILT_IMAGES[@]}"
      do
        IMAGE_WITHOUT_SHA=${IMAGE%%@*}
        IMAGE_WITHOUT_SHA_AND_TAG=${IMAGE_WITHOUT_SHA%%:*}
        IMAGE_WITH_SHA=${IMAGE_WITHOUT_SHA_AND_TAG}@${IMAGE##*@}
        if [[ "$(params.releaseAsLatest)" == "true" ]]
        then
          gcloud -q container images add-tag ${IMAGE_WITH_SHA} ${IMAGE_WITHOUT_SHA_AND_TAG}:latest
        fi
        for REGION in "${REGIONS[@]}"
        do
          if [[ "$(params.releaseAsLatest)" == "true" ]]
          then
            for TAG in "latest" $(params.versionTag)
            do
              gcloud -q container images add-tag ${IMAGE_WITH_SHA} ${REGION}.${IMAGE_WITHOUT_SHA_AND_TAG}:$TAG
            done
          else
            TAG="$(params.versionTag)"
            gcloud -q container images add-tag ${IMAGE_WITH_SHA} ${REGION}.${IMAGE_WITHOUT_SHA_AND_TAG}:$TAG
          fi
        done
      done
    volumeMounts:
      - name: gcp-secret
        mountPath: /secret

  volumes:
    - name: gcp-secret
      secret:
        secretName: release-secret
