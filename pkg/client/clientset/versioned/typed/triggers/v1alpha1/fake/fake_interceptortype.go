/*
Copyright 2019 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/tektoncd/triggers/pkg/apis/triggers/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeInterceptorTypes implements InterceptorTypeInterface
type FakeInterceptorTypes struct {
	Fake *FakeTriggersV1alpha1
}

var interceptortypesResource = schema.GroupVersionResource{Group: "triggers.tekton.dev", Version: "v1alpha1", Resource: "interceptortypes"}

var interceptortypesKind = schema.GroupVersionKind{Group: "triggers.tekton.dev", Version: "v1alpha1", Kind: "InterceptorType"}

// Get takes name of the interceptorType, and returns the corresponding interceptorType object, and an error if there is any.
func (c *FakeInterceptorTypes) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.InterceptorType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(interceptortypesResource, name), &v1alpha1.InterceptorType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.InterceptorType), err
}

// List takes label and field selectors, and returns the list of InterceptorTypes that match those selectors.
func (c *FakeInterceptorTypes) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.InterceptorTypeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(interceptortypesResource, interceptortypesKind, opts), &v1alpha1.InterceptorTypeList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.InterceptorTypeList{ListMeta: obj.(*v1alpha1.InterceptorTypeList).ListMeta}
	for _, item := range obj.(*v1alpha1.InterceptorTypeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested interceptorTypes.
func (c *FakeInterceptorTypes) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(interceptortypesResource, opts))
}

// Create takes the representation of a interceptorType and creates it.  Returns the server's representation of the interceptorType, and an error, if there is any.
func (c *FakeInterceptorTypes) Create(ctx context.Context, interceptorType *v1alpha1.InterceptorType, opts v1.CreateOptions) (result *v1alpha1.InterceptorType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(interceptortypesResource, interceptorType), &v1alpha1.InterceptorType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.InterceptorType), err
}

// Update takes the representation of a interceptorType and updates it. Returns the server's representation of the interceptorType, and an error, if there is any.
func (c *FakeInterceptorTypes) Update(ctx context.Context, interceptorType *v1alpha1.InterceptorType, opts v1.UpdateOptions) (result *v1alpha1.InterceptorType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(interceptortypesResource, interceptorType), &v1alpha1.InterceptorType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.InterceptorType), err
}

// Delete takes name of the interceptorType and deletes it. Returns an error if one occurs.
func (c *FakeInterceptorTypes) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(interceptortypesResource, name), &v1alpha1.InterceptorType{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeInterceptorTypes) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(interceptortypesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.InterceptorTypeList{})
	return err
}

// Patch applies the patch and returns the patched interceptorType.
func (c *FakeInterceptorTypes) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.InterceptorType, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(interceptortypesResource, name, pt, data, subresources...), &v1alpha1.InterceptorType{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.InterceptorType), err
}
